datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  relationModel = "default"
  imports       = "../specs"
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  // tiId  String @unique
  // name  String
  Access   Access? @relation(fields: [accessId], references: [id])
  accessId Int?    @map("departmentAccessId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Ctc {
  id       String   @id
  name     String
  ctc      Int /// @zod.min(0)
  fromDate DateTime /// @zod.custom(imports.IsoDate)
  toDate   DateTime /// @zod.custom(imports.IsoDate)
}

enum Billable {
  billable
  nonBillable
}

model DepartmentMapping {
  id         Int      @id @default(autoincrement())
  tiId       String
  username   String // @TODO: remove this once integrated with user
  ctc        Int /// @zod.min(0)
  department String
  fromDate   DateTime
  toDate     DateTime
  category   Billable
}

model Department {
  id   Int    @id @default(autoincrement())
  name String

  Budget      Budget[]
  Expenditure Expenditure[]

  Access Access[]
}

model Budget {
  id            Int        @id @default(autoincrement())
  amount        Int
  // @TODO: should be int/string
  financialYear DateTime
  Department    Department @relation(fields: [departmentId], references: [id])
  departmentId  Int
  category      Billable
}

model Expenditure {
  id           Int        @id @default(autoincrement())
  category     Billable
  date         DateTime
  amount       Int
  remarks      String
  Department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
}

model Access {
  id               Int        @id @default(autoincrement())
  parentCostCenter String // @TODO: 
  Department       Department @relation(fields: [departmentId], references: [id])
  departmentId     Int
  User             User[]
}
